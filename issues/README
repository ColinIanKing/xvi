		  Keeping issues in the source tree

		  Martin Guy <martinwguy@gmail.com>
			January-February 2017

This is an experiment in keeping issues with the source code instead of
separately on some web server. That way, the current set of issue files
in the source tree refers to the exact version of the source code that it
accompanies *and* you don't lose them all when the company closes down
or when your mate's web server dies unexpectedly with no recent backups.

The idea is to keep the description of each issue as text in a file
in this directory. The file is created when the issue is discovered,
modified as its analysis proceeds and is deleted with the commit
that resolves it.

At present we have a script "pull" that downloads issues from Github
into files with names like "89.yaml" and from those we need to extract
the title, description and comments into text files called "89" and so on.

For future issues, short descriptive filenames would be better
not only to prevent two developers from each adding bug 90 in their
respective copies and then being unable to sync, but also because
speaking in bug numbers is barbaric.

== Works in progress on branches with BUGS files ==

To start work on an issue we craate a git branch, probably of the same
short descriptive name as its issues/* file (or "issue89" for the numbered
ones) and copy the issues/* file into BUGS in the top directory.
This is for notes about the work in progress on the issue and is where we
add any issues that only apply to the work on that branch, separated from
the title and description and from each other by ----- lines.

When the branch is merged into the master branch, its BUGS file is deleted,
as is the corresponding issues/* file on the master branch.

== Open and closed bugs ==

Open bugs are easy to see because they still have files in issues/ and it
shouldn't be too hard to get a history of closed bugs with a script that
trawls the git history and fishes out the last versions of any files
that have been deleted from issues/.

== Adding Scientific Debugging ==

More interesting yet would be to implement the Scientific Debugging workflow
by adding paragraphs to a branch's BUGS file (or to the master branch's
issues/* file if work hasn't started yet) such as

Defect: Observed behavior, different from expected.

Hypothesis:
	What might be causing the defect.

Experiment:
	A test that should test the hypothesis.

Observation:
	The result of the experiment.

Conclusion:
	Hypothesis is confirmed or rejected by the result, or the outcome of
	the experiment was inconclusive, leading us to refine the hypothesis,
	replace it with a new hypothesis or devise a better experiment.

not as an eternal diary, like the github comments, but rewriting it as
hypotheses are refined on the path the bug resolution, at which point
a single hypothesis should remain with the experiment that confirms it.
