#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

# This file is included by all tests and includes an implementation of "term"
# (either tkterm or virterm), of term_expect and our term_utils.
#
# 	Martin Guy <martinwguy@gmail.com>, January 2017.


# Choose a terminal emulator: either tkterm (needs X) of virterm (doesn't).
# To force use of virterm, use
#	TKTERM=virterm make check
# or
#	DISPLAY= make check

if { [info exists ::env(TKTERM)] && $::env(TKTERM) != "" } {
    source $::env(TKTERM)
} else {
    if { ! [info exists ::env(DISPLAY)] || $::env(DISPLAY) == "" } {
	source virterm
    } else {
	source tkterm
    }
}

# Utility functions for xvi's tkterm test rig

# Does the screen image start with the lines in the given list
# and is the cursor at the expected position?
#
# If you are testing the first line of the screen against a literal string,
# you can say:
#	if [screen_is 1 0 "{Hello, world!}"] { ;# A list of one line
# or
#	term_expect 1 0 timeout { exit 100 } \
#		 { screen_is "{Hello, world!}" }
#
# You can also check the first lines of the screen by passing a list of lines -
# see the "hanoi" test for an example of this.
# In the string between { and }, no further characters need escaping but
# there is no way to include an unmatched { character.
# If you use "list" to create the list, you can include the line strings in
# double quotes, within which you need to escape literal $, [ and \ with a
# preceding \ and can use sequences like \r mean newline and so on.

proc screen_is {crow ccol should} {
    global term
    if { ! [cursor_at $crow $ccol] } { return FALSE }
    for {set i 0} {$i < [llength $should]} {incr i} {
	set line [lindex $should $i]
	# List of lines is indexed from 0 by i but screen row is indexed from 1
	set row [expr $i + 1]
	set onscreen [string trimright [$term get $row.0 $row.end]]
	if { $onscreen != $line } { return FALSE }
    }
    return TRUE
}

# Is the cursor at the specified row and column?
# Note: row numbers are 1 to $rows but column numbers are 0 to $cols-1
proc cursor_at {row col} {
    global term cur_row cur_col
    # There must be a snappier way to say this, but I can't find it!
    if { $cur_row == $row && $cur_col == $col } {
	return TRUE
    } else {
	return FALSE
    }
}

# What's on the last line of the screen (minus trailing spaces)?
proc statusline {} {
    global term rows
    return [string trimright [$term get $rows.0 $rows.end]]
}

# Is the status line (with trailing spaces stripped from it) this text?
proc statusline_is {str} {
    global term
    if { $str == [statusline] } {
	return TRUE
    } else {
	return FALSE
    }
}

# Is the status line (with trailing spaces stripped from it)
# different from this text?
proc statusline_isnt {str} {
    global term
    if { $str == [statusline] } {
	return FALSE
    } else {
	return TRUE
    }
}

# Write the screen contents to a named file
proc term_dump {file} {
	global term rows cols cur_row cur_col

	if { [catch {open $file w} fid] } {
	    puts "Cannot create $file"
	    exit 1
	}

	for {set i 1} {$i <= $rows} {incr i} {
	    catch { puts $fid [string trimright [$term get $i.0 $i.end]] } {
		puts "Cannot write to $file"
		exit 1
	    }
	}

	catch { puts $fid "Cursor is at ($cur_row,$cur_col)" } {
	    puts "Cannot finalize $file"
	    exit 1
	}

	catch { close $fid } {
	    puts "Cannot close $file"
	    exit 1
	}
}
