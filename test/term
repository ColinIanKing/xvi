#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}


# term, part of the test suite for xvi
#
# This file is included by all tests, it chooses an implementation of "term"
# and term_expect (either tkterm or virterm) and provides some utilities.
#
# 	Martin Guy <martinwguy@gmail.com>, January 2017.


# Choose a terminal emulator: either tkterm (needs X) of virterm (doesn't).
# To force use of virterm, use
#	TKTERM=virterm make check
# or
#	DISPLAY= make check
# The choice is remembered in tcl global $tkterm

if { [info exists ::env(TKTERM)] && $::env(TKTERM) != "" } {
    set tkterm $::env(TKTERM)
} else {
    if { ! [info exists ::env(DISPLAY)] || $::env(DISPLAY) == "" } {
	set tkterm virterm
    } else {
	set tkterm tkterm
    }
}

# Harness to run tests without the "clear to end of line" capability
if { [info exists ::env(NOCE)] } {
    # Drop the "ce" capability from our terminal descriptions
    exec sed {/\\E\[K/d} < $tkterm > "$tkterm-noce"
    set tkterm "$tkterm-noce"
}

source $tkterm

if { [info exists ::env(NOCE)] } {
    exec rm "$tkterm"
}

# Most tests use timeouts but 1 sec is more appropriate than the default of 10.
set timeout 1

#
# Utility functions for xvi's tkterm test rig
#

# Start the vi editor from the shell command prompt
#
# To test other vi clones
# use	VI=nvi make check
# or	VI="vim -c redraw" make check

proc start_vi {} {
    set vi ../src/xvi
    if { [info exists ::env(VI)] && $::env(VI) != "" } {
	set vi $::env(VI)
    }
    exp_send "exec $vi\r"
}

# screen_is row column lines
#
# Does the screen image start with the lines in the given list
# and is the cursor at the expected position?
# row is 1-24 or 25, column is 0-79 and lines is a list of strings or a
# simple string not containing spaces.
#
# To test if the first three lines are "one", "two" and "three"
# with the cursor top left, you can say:
#	if [screen_is 1 0 [list "one" "two" "three"] ] { ...
# or
#	term_expect timeout { exit 100 } \
#		 { screen_is 1 0 "abc" }
#
# To test if the first line is "abc" with the cursor top left, you can also say:
#	if [screen_is 1 0 "abc"] { ...
# or
#	term_expect timeout { exit 100 } \
#		 { screen_is 1 0 "abc" }
# but if you need to test the first line of the screen against
# a string that contains spaces, you need to use a list of one line,
# for which the shortest syntax is:
#	if [screen_is 1 0 "{Hello, world!}"] {
# or
#	term_expect timeout { exit 100 } \
#		 { screen_is 1 0 "{Hello, world!}" }
#
# In double-quoted strings, backslash escapes, string substitution and
# command execution with [ are available.
# In strings between { and } instead, no further characters are special but
# there is no way to include an unmatched { character.

proc screen_is {crow ccol should} {
    global term
    if { ! [cursor_at $crow $ccol] } { return FALSE }
    for {set i 0} {$i < [llength $should]} {incr i} {
	set line [lindex $should $i]
	# List of lines is indexed from 0 by i but screen row is indexed from 1
	set row [expr $i + 1]
	set onscreen [string trimright [$term get $row.0 $row.end]]
	if { $onscreen != $line } { return FALSE }
    }
    return TRUE
}

# Is the cursor at the specified row and column?
# Note: row numbers are 1 to $rows but column numbers are 0 to $cols-1
proc cursor_at {row col} {
    global term cur_row cur_col
    # There must be a snappier way to say this, but I can't find it!
    if { $cur_row == $row && $cur_col == $col } {
	return TRUE
    } else {
	return FALSE
    }
}

# What's on the last line of the screen (minus trailing spaces)?
proc statusline {} {
    global term rows
    return [string trimright [$term get $rows.0 $rows.end]]
}

# Is the status line (with trailing spaces stripped from it) this text?
proc statusline_is {str} {
    global term
    if { $str == [statusline] } {
	return TRUE
    } else {
	return FALSE
    }
}

# Is the status line (with trailing spaces stripped from it)
# different from this text?
proc statusline_isnt {str} {
    global term
    if { $str == [statusline] } {
	return FALSE
    } else {
	return TRUE
    }
}

# Is the status line (with trailing spaces stripped from it) this text?
proc statusline_starts {str} {
    global term
    if { $str eq [string range [statusline] 0 [expr { [string length $str] - 1 }] ] } {
	return TRUE
    } else {
	return FALSE
    }
}

# tksleep works around a presumed bug in tkterm which forces us to wait
# for a second between exp_sending characters (especially with a trailing Esc)
# and calling term_expect.  virterm seems not to need this.
proc tksleep {} {
    global tkterm
    if { [regexp "^tkterm" $tkterm] } { sleep 1 }
}

# What to do when a test fails
proc fail {status} {
    if { [info exists ::env(DUMP)] && $::env(DUMP) != "" } {
	term_dump $::env(DUMP)
    }
    exit $status
}

# Write the screen contents to a named file
proc term_dump {file} {
	global term rows cols cur_row cur_col

	if { [catch {open $file w} fid] } {
	    puts "Cannot create $file"
	    exit 1
	}

	for {set i 1} {$i <= $rows} {incr i} {
	    catch { puts $fid [string trimright [$term get $i.0 $i.end]] } {
		puts "Cannot write to $file"
		exit 1
	    }
	}

	catch { puts $fid "Cursor is at ($cur_row,$cur_col)" } {
	    puts "Cannot finalize $file"
	    exit 1
	}

	catch { close $fid } {
	    puts "Cannot close $file"
	    exit 1
	}
}
